
/*
 * de.unkrig.doclet.javadoc - A reimplementation of the JAVADOC utility for experimental purposes
 *
 * Copyright (c) 2015, Arno Unkrig
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *       following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *       following disclaimer in the documentation and/or other materials provided with the distribution.
 *    3. The name of the author may not be used to endorse or promote products derived from this software without
 *       specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package de.unkrig.doclet.javadoc.templates;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.regex.Pattern;

import com.sun.javadoc.AnnotationDesc;
import com.sun.javadoc.ClassDoc;
import com.sun.javadoc.Doc;
import com.sun.javadoc.FieldDoc;
import com.sun.javadoc.MemberDoc;
import com.sun.javadoc.MethodDoc;
import com.sun.javadoc.PackageDoc;
import com.sun.javadoc.ParamTag;
import com.sun.javadoc.Parameter;
import com.sun.javadoc.ParameterizedType;
import com.sun.javadoc.ProgramElementDoc;
import com.sun.javadoc.RootDoc;
import com.sun.javadoc.SeeTag;
import com.sun.javadoc.ThrowsTag;
import com.sun.javadoc.Type;
import com.sun.javadoc.TypeVariable;
import com.sun.javadoc.WildcardType;

import de.unkrig.commons.doclet.Tags;
import de.unkrig.commons.doclet.html.Html;
import de.unkrig.commons.lang.ExceptionUtil;
import de.unkrig.commons.lang.StringUtil;
import de.unkrig.commons.lang.protocol.Longjump;
import de.unkrig.commons.lang.protocol.Producer;
import de.unkrig.commons.lang.protocol.ProducerUtil;
import de.unkrig.commons.nullanalysis.Nullable;
import de.unkrig.notemplate.NoTemplate;

/**
 * Rendition of the per-class JAVADOC page.
 */
public
class ClassFrame extends NoTemplate {

    private static final Html HTML = new Html(Html.STANDARD_LINK_MAKER);

    @Nullable private RootDoc rootDoc;

    /**
     * Renders this page.
     *
     * @param rootDoc
     * @param noTimestamp    Whether the "-notimestamp" command line option is given
     * @param generationDate Is rendered in an HTML comment
     * @param windowTitle    The argument of the "-windowtitle" command line option
     * @param previousClass  Used for the "Prev" links in the top and bottom navigation bars
     * @param clasS          Subject class
     * @param nextClass      Used for the "Next" links in the top and bottom navigation bars
     * @param home           The relative path to the "home directory", e.g. "{@code ../../}"
     * @param top            The argument of the "-top" command line option
     * @param bottom         The argument of the "-bottom" command line option
     * @param header         The argument of the "-header" command line option
     * @param footer         The argument of the "-footer" command line option
     */
    public void
    render(
        RootDoc            rootDoc,
        boolean            noTimestamp,
        Date               generationDate,
        @Nullable String   windowTitle,
        @Nullable ClassDoc previousClass,
        ClassDoc           clasS,
        @Nullable ClassDoc nextClass,
        String             home,
        @Nullable String   top,
        @Nullable String   bottom,
        @Nullable String   header,
        @Nullable String   footer
    ) {
        this.rootDoc = rootDoc;

        final MethodDoc[] sortedMethods = clasS.methods();
        Arrays.sort(sortedMethods);

        this.l(
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">",
"<!-- NewPage -->",
"<html lang=\"de\">",
"<head>",
"<!-- Generated by de.unkrig.doclet.javadoc" + (noTimestamp ? "" : " on " + generationDate) + " -->"
        );
        if (windowTitle == null) {
            this.l(
"<title>" + clasS.name() + "</title>"
            );
        } else {
            this.l(
"<title>" + clasS.name() + " (" + windowTitle + ")</title>"
            );
        }

        if (!noTimestamp) {
            this.l(
"<meta name=\"date\" content=\"" + new SimpleDateFormat("yyyy-MM-dd").format(generationDate) + "\">"
            );
        }
        this.l(
"<link rel=\"stylesheet\" type=\"text/css\" href=\"" + home + "stylesheet.css\" title=\"Style\">",
"</head>",
"<body>",
"<script type=\"text/javascript\"><!--",
"    if (location.href.indexOf('is-external=true') == -1) {",
"        parent.document.title=\"" + clasS.name() + (windowTitle == null ? "" : " (" + windowTitle + ")") + "\";",
"    }",
"//-->",
"</script>",
"<noscript>",
"<div>JavaScript is disabled on your browser.</div>",
"</noscript>"
        );
        if (top != null) {
            this.l(
top
            );
        }
        this.l(
"<!-- ========= START OF TOP NAVBAR ======= -->",
"<div class=\"topNav\"><a name=\"navbar_top\">",
"<!--   -->",
"</a><a href=\"#skip-navbar_top\" title=\"Skip navigation links\"></a><a name=\"navbar_top_firstrow\">",
"<!--   -->",
"</a>",
"<ul class=\"navList\" title=\"Navigation\">",
"<li><a href=\"" + home + "overview-summary.html\">Overview</a></li>",
"<li><a href=\"package-summary.html\">Package</a></li>",
"<li class=\"navBarCell1Rev\">Class</li>",
"<li><a href=\"package-tree.html\">Tree</a></li>",
"<li><a href=\"" + home + "deprecated-list.html\">Deprecated</a></li>",
"<li><a href=\"" + home + "index-all.html\">Index</a></li>",
"<li><a href=\"" + home + "help-doc.html\">Help</a></li>",
"</ul>"
        );
        if (header != null) {
            this.l(
"<div class=\"aboutLanguage\"><em>" + header + "</em></div>"
            );
        }
        this.l(
"</div>",
"<div class=\"subNav\">",
"<ul class=\"navList\">"
        );
        if (previousClass != null) {
            this.l(
"<li><a href=\"" + home + ClassFrame.href(previousClass) + "\" title=\"" + ClassFrame.title(previousClass) + "\"><span class=\"strong\">Prev Class</span></a></li>"
            );
        } else {
            this.l(
"<li>Prev Class</li>"
            );
        }
        if (nextClass != null) {
            this.l(
"<li><a href=\"" + home + ClassFrame.href(nextClass) + "\" title=\"" + ClassFrame.title(nextClass) + "\"><span class=\"strong\">Next Class</span></a></li>"
            );
        } else {
            this.l(
"<li>Next&nbsp;Class</li>"
            );
        }
        this.l(
"</ul>",
"<ul class=\"navList\">",
"<li><a href=\"" + home + "index.html?" + ClassFrame.href(clasS) + "\" target=\"_top\">Frames</a></li>",
"<li><a href=\"" + clasS.name() + ".html\" target=\"_top\">No Frames</a></li>",
"</ul>",
"<ul class=\"navList\" id=\"allclasses_navbar_top\">",
"<li><a href=\"" + home + "allclasses-noframe.html\">All Classes</a></li>",
"</ul>",
"<div>",
"<script type=\"text/javascript\"><!--",
"  allClassesLink = document.getElementById(\"allclasses_navbar_top\");",
"  if(window==top) {",
"    allClassesLink.style.display = \"block\";",
"  }",
"  else {",
"    allClassesLink.style.display = \"none\";",
"  }",
"  //-->",
"</script>",
"</div>",
"<div>",
"<ul class=\"subNavList\">",
"<li>Summary:&nbsp;</li>"
        );
        if (clasS.innerClasses().length > 0) {
            this.l(
"<li><a href=\"#nested_class_summary\">Nested</a>&nbsp;|&nbsp;</li>"
            );
        } else {
            this.l(
"<li>Nested&nbsp;|&nbsp;</li>"
            );
        }
        if (clasS.fields().length > 0) {
            this.l(
"<li><a href=\"#field_summary\">Field</a>&nbsp;|&nbsp;</li>"
            );
        } else {
            this.l(
"<li>Field&nbsp;|&nbsp;</li>"
            );
        }
        this.l(
"<li>Constr&nbsp;|&nbsp;</li>",
"<li><a href=\"#method_summary\">Method</a></li>",
"</ul>",
"<ul class=\"subNavList\">",
"<li>Detail:&nbsp;</li>"
        );
        if (clasS.fields().length > 0) {
            this.l(
"<li><a href=\"#field_detail\">Field</a>&nbsp;|&nbsp;</li>"
            );
        } else {
            this.l(
"<li>Field&nbsp;|&nbsp;</li>"
            );
        }
        this.l(
"<li>Constr&nbsp;|&nbsp;</li>",
"<li><a href=\"#method_detail\">Method</a></li>",
"</ul>",
"</div>",
"<a name=\"skip-navbar_top\">",
"<!--   -->",
"</a></div>",
"<!-- ========= END OF TOP NAVBAR ========= -->",
"<!-- ======== START OF CLASS DATA ======== -->",
"<div class=\"header\">",
"<div class=\"subTitle\">" + clasS.containingPackage().name() + "</div>",
"<h2 title=\"" + ClassFrame.capFirst(ClassFrame.category(clasS)) + " " + clasS.name() + "\" class=\"title\">" + ClassFrame.capFirst(ClassFrame.category(clasS)) + " " + clasS.name() + NoTemplate.html(ClassFrame.typeParameters(clasS)) + "</h2>",
"</div>",
"<div class=\"contentContainer\">"
        );
        ClassDoc[] scs = ClassFrame.superclassChain(clasS);
        if (scs.length > 0) {
            for (int sci = scs.length - 1; sci >= 0; sci--) {
                ClassDoc sc = scs[sci];
                this.l(
"<ul class=\"inheritance\">",
"<li>" + sc.qualifiedName() + "</li>",
"<li>"
                );
            }
            this.l(
"<ul class=\"inheritance\">",
"<li>" + clasS.qualifiedName() + "</li>",
"</ul>"
            );
            for (int i = 0; i < scs.length; i++) {
                this.l(
"</li>",
"</ul>"
                );
            }
        }
        this.l(
"<div class=\"description\">",
"<ul class=\"blockList\">",
"<li class=\"blockList\">"
        );
        if (clasS.typeParamTags().length > 0) {
            this.p("<dl><dt><span class=\"strong\">Type Parameters:</span></dt>");
            for (ParamTag tpt : clasS.typeParamTags()) {
                String comment = tpt.parameterComment();
                try {
                    comment = ClassFrame.HTML.fromJavadocText(comment, clasS, rootDoc);
                } catch (Longjump e) {
                    ;
                }
                this.p("<dd><code>" + tpt.parameterName() + "</code> - " + comment + "</dd>");
            }
            this.l(
"</dl>"
            );
        }
        if (this.knownSubinterfaces(clasS).size() > 0) {
            this.l(
"<dl>",
"<dt>All Known Subinterfaces:</dt>"
            );
            for (ClassDoc si : this.knownSubinterfaces(clasS)) {
                this.l(
"<dd><a href=\"" + home + ClassFrame.href(si) + "\" title=\"" + ClassFrame.title(si) + "\">" + si.name() + "</a>" + NoTemplate.html(ClassFrame.typeParameters(si)) + "</dd>"
                );
            }
            this.l(
"</dl>"
            );
        }
        this.l(
"<hr>",
"<br>"
        );
        this.p("<pre>");
        this.p("public ");
        if (clasS.isFinal()) this.p("final ");
        this.p(clasS.isClass() ? "class " : "interface ");
        this.p("<span class=\"strong\">" + clasS.name() + NoTemplate.html(ClassFrame.typeParameters(clasS)) + "</span>");
        if (clasS.superclass() != null) {
            this.l();
            this.p("extends " + clasS.superclass().qualifiedName() + ClassFrame.typeArguments(clasS.superclass()));
        }
        this.l(
"</pre>"
        );
        if (!this.description(clasS).isEmpty()) {
            this.l(
"<div class=\"block\">" + this.description(clasS) + "</div>"
            );
        }
        if (clasS.seeTags().length > 0) {
            this.p("<dl><dt><span class=\"strong\">See Also:</span></dt>");
            this.p("<dd>");
            Once once = NoTemplate.once();
            for (SeeTag st : clasS.seeTags()) {
                if (!once.once()) {
                    this.l(
", "
                    );
                }
                Doc reference = ClassFrame.reference(st);
                this.p("<a href=\"" + home + ClassFrame.href(reference) + "\"");
                if (ClassFrame.title(reference) != null) {
                    this.p(" title=\"" + ClassFrame.title(reference) + "\"");
                }
                this.p("><code>" + ClassFrame.toString(reference, clasS) + "</code></a>" + st.label());
            }
            this.l(
"</dd></dl>"
            );
        }
        this.l(
"</li>",
"</ul>",
"</div>",
"<div class=\"summary\">",
"<ul class=\"blockList\">",
"<li class=\"blockList\">"
        );
        if (clasS.fields().length > 0) {
            this.l(
"<!-- =========== FIELD SUMMARY =========== -->",
"<ul class=\"blockList\">",
"<li class=\"blockList\"><a name=\"field_summary\">",
"<!--   -->",
"</a>",
"<h3>Field Summary</h3>",
"<table class=\"overviewSummary\" border=\"0\" cellpadding=\"3\" cellspacing=\"0\" summary=\"Field Summary table, listing fields, and an explanation\">",
"<caption><span>Fields</span><span class=\"tabEnd\">&nbsp;</span></caption>",
"<tr>",
"<th class=\"colFirst\" scope=\"col\">Modifier and Type</th>",
"<th class=\"colLast\" scope=\"col\">Field and Description</th>",
"</tr>"
            );
            Producer<String> cls = ProducerUtil.alternate("altColor", "rowColor");
            for (FieldDoc fd : clasS.fields()) {
                this.l(
"<tr class=\"" + cls.produce() + "\">",
"<td class=\"colFirst\"><code>" + (fd.isStatic() ? "static " : "") + fd.type() + "</code></td>",
"<td class=\"colLast\"><code><strong><a href=\"" + home + ClassFrame.href(fd) + "\">" + fd.name() + "</a></strong></code>",
"<div class=\"block\">" + this.firstSentenceOfDescription(fd) + "</div>",
"</td>",
"</tr>"
                );
            }
            this.l(
"</table>",
"</li>",
"</ul>"
            );
        }
        if (clasS.innerClasses().length > 0) {
            this.l(
"<!-- ======== NESTED CLASS SUMMARY ======== -->",
"<ul class=\"blockList\">",
"<li class=\"blockList\"><a name=\"nested_class_summary\">",
"<!--   -->",
"</a>",
"<h3>Nested Class Summary</h3>",
"<table class=\"overviewSummary\" border=\"0\" cellpadding=\"3\" cellspacing=\"0\" summary=\"Nested Class Summary table, listing nested classes, and an explanation\">",
"<caption><span>Nested Classes</span><span class=\"tabEnd\">&nbsp;</span></caption>",
"<tr>",
"<th class=\"colFirst\" scope=\"col\">Modifier and Type</th>",
"<th class=\"colLast\" scope=\"col\">Class and Description</th>",
"</tr>"
            );
            Producer<String> cls = ProducerUtil.alternate("altColor", "rowColor");
            for (ClassDoc ncd : clasS.innerClasses()) {
                this.l(
"<tr class=\"" + cls.produce() + "\">",
"<td class=\"colFirst\"><code>static " + ClassFrame.category(ncd) + "&nbsp;</code></td>"
                );
                this.p((
                    "<td class=\"colLast\"><code><strong><a href=\""
                    + home
                    + ClassFrame.href(ncd)
                    + "\" title=\""
                    + ClassFrame.title(ncd)
                    + "\">"
                    + ncd.typeName()
                    + "</a>"
                ));
                if (ncd.typeParameters().length > 0) {
                    this.p("&lt;");
                    Once once = NoTemplate.once();
                    for (TypeVariable ncoitp : ncd.typeParameters()) {
                        if (!once.once()) this.p(",");
                        this.p((
                            "<a href=\""
                            + home
                            + ClassFrame.href(ncd)
                            + "\" title=\"type parameter in "
                            + ncd.typeName()    // Outer.Inner
                            + "\">"
                            + ncoitp.typeName() // Outer.Inner
                            + "</a>"
                        ));
                    }
                    this.p("&gt;");
                }
                this.l(
"</strong></code>",
"<div class=\"block\">" + this.firstSentenceOfDescription(ncd) + "</div>",
"</td>",
"</tr>"
                );
            }
            this.l(
"</table>",
"</li>",
"</ul>"
            );
        }
        if (clasS.methods().length > 0) {
            this.l(
"<!-- ========== METHOD SUMMARY =========== -->",
"<ul class=\"blockList\">",
"<li class=\"blockList\"><a name=\"method_summary\">",
"<!--   -->",
"</a>",
"<h3>Method Summary</h3>",
"<table class=\"overviewSummary\" border=\"0\" cellpadding=\"3\" cellspacing=\"0\" summary=\"Method Summary table, listing methods, and an explanation\">",
"<caption><span>Methods</span><span class=\"tabEnd\">&nbsp;</span></caption>",
"<tr>",
"<th class=\"colFirst\" scope=\"col\">Modifier and Type</th>",
"<th class=\"colLast\" scope=\"col\">Method and Description</th>",
"</tr>"
            );
            Producer<String>  cls = ProducerUtil.alternate("altColor", "rowColor");
            for (MethodDoc md : sortedMethods) {
                this.l(
"<tr class=\"" + cls.produce() + "\">"
                );
                this.p("<td class=\"colFirst\"><code>");
                if (md.isStatic()) this.p("static ");
                if (md.typeParameters().length > 0) {
                    this.p("&lt;");
                    Once once = NoTemplate.once();
                    for (TypeVariable tp : md.typeParameters()) {
                        if (!once.once()) this.p(",");
                        this.p(tp.toString());
                    }
                    this.p("&gt;&nbsp;");
                    if (md.typeParameters()[0].toString().length() > 10 || md.typeParameters().length > 1) {
                        this.p("<br>");
                    }
                }
                if (md.returnType().asTypeVariable() != null) {
                    this.l(
md.returnType().qualifiedTypeName() + "</code></td>"
                    );
                } else
                if (
                    md.returnType().isPrimitive()
                    || !md.returnType().dimension().isEmpty()
                    || !md.returnType().asClassDoc().isIncluded()
                ) {
                    this.l(
md.returnType() + "</code></td>"
                    );
                } else
                {
                    this.l(
"<a href=\"" + home + ClassFrame.href(md.returnType().asClassDoc()) + "\" title=\"" + ClassFrame.title(md.returnType().asClassDoc()) + "\">" + md.returnType().simpleTypeName() + "</a>" + NoTemplate.html(ClassFrame.typeArguments(md.returnType())) + "</code></td>"
                    );
                }
                this.p("<td class=\"colLast\"><code><strong><a href=\"" + home + ClassFrame.href(md) + "\">" + md.name() + "</a></strong>(");
                Once once = NoTemplate.once();
                for (Parameter p : md.parameters()) {
                    if (!once.once()) {
                        this.l(
","
                        );
                        this.p(StringUtil.repeat(md.name().length(), ' '));
                    }
                    Type pt = p.type();
                    if (pt.isPrimitive()) {
                        this.p(pt.typeName());
                    } else
                    if (pt.asTypeVariable() != null) {
                        if (clasS.isInterface()) {
                            this.p("<a href=\"" + home + ClassFrame.href(clasS) + "\" title=\"type parameter in " + clasS.name() + "\">" + pt.typeName() + "</a>");
                        } else {
                            this.p(pt.typeName());
                        }
                    } else
                    {
                        this.p("<a href=\"" + home + ClassFrame.href(pt.asClassDoc()) + "\" title=\"" + ClassFrame.category(pt.asClassDoc()) + " in " + pt.asClassDoc().containingPackage().name() + "\">" + pt.typeName() + "</a>");
                        this.p(NoTemplate.html(pt.toString()));
                    }
                    this.p("&nbsp;" + p.name());
                }
                this.p(")</code>");
                if (this.firstSentenceOfDescription(md).isEmpty()) {
                    this.p("&nbsp;");
                } else {
                    this.l();
                    this.l(
"<div class=\"block\">" + this.firstSentenceOfDescription(md) + "</div>"
                    );
                }
                this.l(
"</td>",
"</tr>"
                );
            }
            this.l(
"</table>"
            );
        }
        for (Type bt : this.baseClassesAndInterfaces(clasS)) {
            this.l(
"<ul class=\"blockList\">",
"<li class=\"blockList\"><a name=\"methods_inherited_from_class_" + bt.qualifiedTypeName() + "\">",
"<!--   -->",
"</a>",
"<h3>Methods inherited from class&nbsp;" + bt.qualifiedTypeName() + "</h3>"
            );
            this.p("<code>");
            Once        once = NoTemplate.once();
            MethodDoc[] btms = bt.asClassDoc().methods();
            Arrays.sort(btms);
            for (MethodDoc btm : btms) {
                if (!once.once()) this.p(", ");
                this.p("  " + btm.name());
            }
            this.l(
"</code></li>",
"</ul>"
            );
        }
        this.l(
"</li>",
"</ul>",
"</li>",
"</ul>",
"</div>",
"<div class=\"details\">",
"<ul class=\"blockList\">",
"<li class=\"blockList\">"
        );
        if (clasS.fields().length > 0) {
            this.l(
"<!-- ============ FIELD DETAIL =========== -->",
"<ul class=\"blockList\">",
"<li class=\"blockList\"><a name=\"field_detail\">",
"<!--   -->",
"</a>",
"<h3>Field Detail</h3>"
            );
            for (int fi = 0; fi < clasS.fields().length; fi++) {
                FieldDoc fd = clasS.fields()[fi];
                this.l(
"<a name=\"" + fd.name() + "\">",
"<!--   -->",
"</a>"
                );
                String cls = fi == clasS.fields().length - 1 ? "blockListLast" : "blockList";
                this.l(
"<ul class=\"" + cls + "\">",
"<li class=\"blockList\">",
"<h4>" + fd.name() + "</h4>",
"<pre>" + fd.modifiers() + "&nbsp;" + fd.type() + " " + fd.name() + "</pre>",
"<div class=\"block\">" + this.description(fd) + "</div>"
                );
                this.p("<dl><dt><span class=\"strong\">See Also:</span></dt>");
                this.p("<dd>");
                for (SeeTag st : fd.seeTags()) {
                    Doc reference = ClassFrame.reference(st);
                    this.p("<a href=\"" + home + ClassFrame.href(reference) + "\"");
                    if (ClassFrame.title(reference) != null) {
                        this.p(" title=\"" + ClassFrame.title(reference) + "\"");
                    }
                    this.p("><code>" + ClassFrame.toString(ClassFrame.reference(st), clasS) + "</code></a>" + st.label());
                    this.l(", ");
                }
                this.l(
"<a href=\"" + home + "constant-values.html#" + clasS.qualifiedName() + "." + fd.name() + "\">Constant Field Values</a></dd></dl>",
"</li>",
"</ul>"
                );
            }
            this.l(
"</li>",
"</ul>"
            );
        }
        this.l(
"<!-- ============ METHOD DETAIL ========== -->",
"<ul class=\"blockList\">",
"<li class=\"blockList\"><a name=\"method_detail\">",
"<!--   -->",
"</a>",
"<h3>Method Detail</h3>"
        );
        for (int mi = 0; mi < clasS.methods().length; mi++) {
            MethodDoc md = clasS.methods()[mi];
            for (String f : ClassFrame.fragments(md)) {
                this.l(
"<a name=\"" + f + "\">",
"<!--   -->"
                );
                this.p("</a>");
            }
            this.l();
            String cls = mi == clasS.methods().length - 1 ? "blockListLast" : "blockList";
            this.l(
"<ul class=\"" + cls + "\">",
"<li class=\"blockList\">",
"<h4>" + md.name() + "</h4>"
            );
            String indent = md.modifiers();
            if (md.typeParameters().length > 0) {
                indent += "<";
                Once once = NoTemplate.once();
                for (TypeVariable tp : md.typeParameters()) {
                    if (!once.once()) indent += ",";
                    indent += tp.toString();
                }
                indent += ">";
            }
            indent += md.returnType().toString() + " " + md.name();

            this.p("<pre>");
            for (AnnotationDesc a : md.annotations()) {
                for (AnnotationDesc aa : a.annotationType().annotations()) {
                    if ("java.lang.annotation.Documented".equals(aa.annotationType().qualifiedName())) {
                        this.l(
"@" + a.annotationType().simpleTypeName()
                        );
                        break;
                    }
                }
            }
            if (!clasS.isInterface()) {
                this.p(md.modifiers() + "&nbsp;");
            }
            if (md.typeParameters().length > 0) {
                this.p("&lt;");
                Once once = NoTemplate.once();
                for (TypeVariable tp : md.typeParameters()) {
                    if (!once.once()) this.p(",");
                    this.p(tp.toString());
                }
                this.p("&gt;&nbsp;");
            }
            if (md.returnType().asTypeVariable() != null) {
                this.p(md.returnType().typeName());
            } else {
                this.p(md.returnType().toString());
            }
            this.p("&nbsp;" + md.name() + "(");
            Once once = NoTemplate.once();
            for (Parameter p : md.parameters()) {
                if (!once.once()) {
                    this.l(
","
                    );
                    this.p(StringUtil.repeat(indent.length() + 2, ' '));
                }
                for (AnnotationDesc a : p.annotations()) {
                    this.l(
"@" + a.annotationType().simpleTypeName()
                    );
                    this.p(StringUtil.repeat(indent.length() + 2, ' '));
                }
                if (p.type().asTypeVariable() != null) {
                    if (clasS.isInterface()) {
                        this.p("<a href=\"" + home + ClassFrame.href(clasS) + "\" title=\"type parameter in " + clasS.name() + "\">" + p.type() + "</a>");
                    } else {
                        this.p(p.type().typeName());
                    }
                } else {
                    this.p(NoTemplate.html(p.type().toString()));
                }
                this.p("&nbsp;" + p.name());
            }
            this.p(")");
            Type[] tets = md.thrownExceptionTypes();
            if (tets.length > 0) {
                for (int teti = 0; teti < tets.length; teti++) {
                    Type tet = tets[teti];

                    if (teti == 0) {
                        this.l();
                        this.p(StringUtil.repeat(indent.length() - 5, ' ') + "throws " + tet);
                    } else {
                        this.l(
","
                        );
                        this.p(StringUtil.repeat(indent.length() + 2, ' ') + tet);
                    }
                }
            }
            this.l(
"</pre>"
            );
            if (!this.description(md).isEmpty()) {
                this.l(
"<div class=\"block\">" + this.description(md) + "</div>"
                );
            }
            if (md.paramTags().length > 0 || this.returnValueDescription(md) != null || md.throwsTags().length > 0 || md.thrownExceptionTypes().length > 0) {
                this.p("<dl>");
                if (md.paramTags().length > 0) {
                    this.p("<dt><span class=\"strong\">Parameters:</span></dt>");
                    for (ParamTag pt : md.paramTags()) {
                        String comment = pt.parameterComment();
                        try {
                            comment = ClassFrame.HTML.fromJavadocText(comment, clasS, rootDoc);
                        } catch (Longjump e) {
                            ;
                        }
                        this.p("<dd><code>" + pt.parameterName() + "</code> - " + comment + "</dd>");
                    }
                    if (this.returnValueDescription(md) != null) this.l();
                }
                if (this.returnValueDescription(md) != null) {
                    this.p("<dt><span class=\"strong\">Returns:</span></dt><dd>" + this.returnValueDescription(md) + "</dd>");
                }
                if (md.throwsTags().length + md.thrownExceptionTypes().length > 0) {

                    if (this.returnValueDescription(md) != null) this.l();

                    this.p("<dt><span class=\"strong\">Throws:</span></dt>");
                    for (ThrowsTag tt : md.throwsTags()) {
                        this.l();
                        this.p("<dd><code>" + tt.exceptionType() + "</code>");
                        String ec = tt.exceptionComment();
                        if (ec != null && ec.length() > 0) {
                            try {
                                ec = ClassFrame.HTML.fromJavadocText(ec, md, rootDoc);
                            } catch (Longjump e) {
                                ;
                            }
                            this.p(" - " + ec);
                        }
                        this.p("</dd>");
                    }
                    TET: for (Type tet : md.thrownExceptionTypes()) {
                        for (ThrowsTag tt : md.throwsTags()) {
                            if (tt.exceptionType() == tet) continue TET;
                        }
                        this.l();
                        this.p("<dd><code>" + tet + "</code></dd>");
                    }
                }
                this.l(
"</dl>"
                );
            }
            this.l(
"</li>",
"</ul>"
            );
        }
        this.l(
"</li>",
"</ul>",
"</li>",
"</ul>",
"</div>",
"</div>",
"<!-- ========= END OF CLASS DATA ========= -->",
"<!-- ======= START OF BOTTOM NAVBAR ====== -->",
"<div class=\"bottomNav\"><a name=\"navbar_bottom\">",
"<!--   -->",
"</a><a href=\"#skip-navbar_bottom\" title=\"Skip navigation links\"></a><a name=\"navbar_bottom_firstrow\">",
"<!--   -->",
"</a>",
"<ul class=\"navList\" title=\"Navigation\">",
"<li><a href=\"" + home + "overview-summary.html\">Overview</a></li>",
"<li><a href=\"package-summary.html\">Package</a></li>",
"<li class=\"navBarCell1Rev\">Class</li>",
"<li><a href=\"package-tree.html\">Tree</a></li>",
"<li><a href=\"" + home + "deprecated-list.html\">Deprecated</a></li>",
"<li><a href=\"" + home + "index-all.html\">Index</a></li>",
"<li><a href=\"" + home + "help-doc.html\">Help</a></li>",
"</ul>"
        );
        if (footer != null) {
            this.l(
"<div class=\"aboutLanguage\"><em>" + footer + "</em></div>"
            );
        }
        this.l(
"</div>",
"<div class=\"subNav\">",
"<ul class=\"navList\">"
        );
        if (previousClass != null) {
            this.l(
"<li><a href=\"" + home + ClassFrame.href(previousClass) + "\" title=\"" + ClassFrame.title(previousClass) + "\"><span class=\"strong\">Prev Class</span></a></li>"
            );
        } else {
            this.l(
"<li>Prev Class</li>"
            );
        }
        if (nextClass != null) {
            this.l(
"<li><a href=\"" + home + ClassFrame.href(nextClass) + "\" title=\"" + ClassFrame.title(nextClass) + "\"><span class=\"strong\">Next Class</span></a></li>"
            );
        } else {
            this.l(
"<li>Next&nbsp;Class</li>"
            );
        }
        this.l(
"</ul>",
"<ul class=\"navList\">",
"<li><a href=\"" + home + "index.html?" + clasS.qualifiedName().replace('.', '/') + ".html\" target=\"_top\">Frames</a></li>",
"<li><a href=\"" + clasS.name() + ".html\" target=\"_top\">No Frames</a></li>",
"</ul>",
"<ul class=\"navList\" id=\"allclasses_navbar_bottom\">",
"<li><a href=\"" + home + "allclasses-noframe.html\">All Classes</a></li>",
"</ul>",
"<div>",
"<script type=\"text/javascript\"><!--",
"  allClassesLink = document.getElementById(\"allclasses_navbar_bottom\");",
"  if(window==top) {",
"    allClassesLink.style.display = \"block\";",
"  }",
"  else {",
"    allClassesLink.style.display = \"none\";",
"  }",
"  //-->",
"</script>",
"</div>",
"<div>",
"<ul class=\"subNavList\">",
"<li>Summary:&nbsp;</li>"
        );
        if (clasS.innerClasses().length > 0) {
            this.l(
"<li><a href=\"#nested.class.summary\">Nested</a>&nbsp;|&nbsp;</li>"
            );
        } else {
            this.l(
"<li>Nested&nbsp;|&nbsp;</li>"
            );
        }
        if (clasS.fields().length == 0) {
            this.l(
"<li>Field&nbsp;|&nbsp;</li>"
            );
        } else {
            this.l(
"<li><a href=\"#field_summary\">Field</a>&nbsp;|&nbsp;</li>"
            );
        }
        this.l(
"<li>Constr&nbsp;|&nbsp;</li>",
"<li><a href=\"#method_summary\">Method</a></li>",
"</ul>",
"<ul class=\"subNavList\">",
"<li>Detail:&nbsp;</li>"
        );
        if (clasS.fields().length == 0) {
            this.l(
"<li>Field&nbsp;|&nbsp;</li>"
            );
        } else {
            this.l(
"<li><a href=\"#field_detail\">Field</a>&nbsp;|&nbsp;</li>"
            );
        }
        this.l(
"<li>Constr&nbsp;|&nbsp;</li>",
"<li><a href=\"#method_detail\">Method</a></li>",
"</ul>",
"</div>",
"<a name=\"skip-navbar_bottom\">",
"<!--   -->",
"</a></div>",
"<!-- ======== END OF BOTTOM NAVBAR ======= -->"
        );
        if (bottom != null) {
            this.l(
"<p class=\"legalCopy\"><small>" + bottom + "</small></p>",
"</body>",
"</html>"
            );
        }
    }

    private Collection<Type>
    getImplementedInterfaces(ClassDoc cd) {
        if (!cd.isClass()) return Collections.emptyList();

        Collection<Type> result = new ArrayList<Type>();
        for (Type it : cd.interfaceTypes()) {
            result.add(it);
            for (Type si : this.getAllSuperInterfaces(it.asClassDoc())) {
                if (!result.contains(si)) result.add(si);
            }
        }
        return result;
    }

    private Collection<Type>
    getAllSuperInterfaces(ClassDoc cd) {

        if (!cd.isInterface()) return Collections.emptyList();

        Collection<Type> result = new ArrayList<Type>();
        for (Type it : cd.interfaceTypes()) {
            result.add(it);
            for (Type si : this.getAllSuperInterfaces(it.asClassDoc())) {
                if (!result.contains(si)) result.add(si);
            }
        }
        return result;
    }

    private Collection<Type>
    baseClassesAndInterfaces(ClassDoc clasS) {

        if (clasS.isInterface()) return this.getAllSuperInterfaces(clasS);

        Collection<Type> result = this.getImplementedInterfaces(clasS);
        for (ClassDoc sc : ClassFrame.superclassChain(clasS)) {
            result.add(sc);
            for (Type i : this.getImplementedInterfaces(sc)) {
                if (!result.contains(i)) result.add(i);
            }
        }

        return result;
    }

    private String
    firstSentenceOfDescription(Doc doc) {

        try {
            String result = ClassFrame.HTML.fromTags(doc.firstSentenceTags(), doc, this.rootDoc);
            result = ClassFrame.ANY_BLOCK_TAG.matcher(result).replaceAll("");
            return result;
        } catch (Longjump l) {
            return "???";
        }
    }

    private static final Pattern
    ANY_BLOCK_TAG = Pattern.compile((
        "</?(?:address|article|aside|audio|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer"
        + "|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video"
        + ")\\b.*?>"
    ), Pattern.CASE_INSENSITIVE);

    private static Doc
    reference(SeeTag st) {

        {
            MemberDoc rm = st.referencedMember();
            if (rm != null) return rm;
        }
        {
            ClassDoc rc = st.referencedClass();
            if (rc != null) return rc;
        }
        {
            PackageDoc rp = st.referencedPackage();
            if (rp != null) return rp;
        }

        throw new AssertionError(st);
    }

    private String
    description(Doc doc) {

        try {
            return ClassFrame.HTML.fromTags(doc.inlineTags(), doc, this.rootDoc);
        } catch (Longjump l) {
            return "???";
        }
    }

    private static String
    typeArguments(Type type) {

        Type[] typeArguments;
        if (type instanceof ClassDoc) {
            typeArguments = new Type[0];
        } else
        if (type instanceof ParameterizedType) {
            typeArguments = ((ParameterizedType) type).typeArguments();
        } else
        {
            throw new AssertionError(type.getClass());
        }

        if (typeArguments.length == 0) return "";

        StringBuilder sb = new StringBuilder("<").append(typeArguments[0].toString());
        for (int i = 1; i < typeArguments.length; i++) {
            sb.append(", ").append(typeArguments[i].toString());
        }
        return sb.append('>').toString();
    }

    private List<ClassDoc>
    knownSubinterfaces(ClassDoc clasS) {

        List<ClassDoc> result = new ArrayList<ClassDoc>();
        for (ClassDoc cd : this.rootDoc.classes()) {
            if (
                cd.isInterface()
                && cd.subclassOf(clasS)
                && cd != clasS
            ) {
                result.add(cd);
            }
        }
        return result;
    }

    private static ClassDoc[]
    superclassChain(ClassDoc cd) {

        List<ClassDoc> result = new ArrayList<ClassDoc>();
        for (ClassDoc scd = cd.superclass(); scd != null; scd = scd.superclass()) {
            result.add(scd);
        }
        return result.toArray(new ClassDoc[result.size()]);
    }

    private static String
    typeParameters(ClassDoc cd) {

        TypeVariable[] typeParameters = cd.typeParameters();

        if (typeParameters.length == 0) return "";

        StringBuilder sb = new StringBuilder("<").append(typeParameters[0].toString());
        for (int i = 1; i < typeParameters.length; i++) {
            sb.append(",").append(typeParameters[i].toString());
        }
        return sb.append('>').toString();
    }

    private static String
    capFirst(String s) {
        if (s.length() == 0) return "";
        return Character.toUpperCase(s.charAt(0)) + s.substring(1);
    }

    @Nullable private static String
    title(Doc doc) { return doc instanceof ClassDoc ? ClassFrame.title((ClassDoc) doc) : null; }

    private static String
    title(ClassDoc cd) { return ClassFrame.category(cd) + " in " + cd.containingPackage().name(); }

    private static String
    category(ClassDoc cd) {

        return (
            cd.isAnnotationType() ? "annotation type" :
            cd.isClass()          ? "class"           :
            cd.isEnum()           ? "enum"            :
            cd.isInterface()      ? "interface"       :
            ExceptionUtil.<String>throwAssertionError(cd.getClass())
        );
    }

    private static String
    href(Doc doc) {
        if (doc instanceof ClassDoc) return ClassFrame.href((ClassDoc) doc);
        if (doc instanceof FieldDoc) return ClassFrame.href((FieldDoc) doc);
        if (doc instanceof MethodDoc) return ClassFrame.href((MethodDoc) doc);
        if (doc instanceof PackageDoc) return ClassFrame.href((PackageDoc) doc);
        throw new AssertionError(doc);
    }

    private static String
    href(ClassDoc cd) {
        if (cd == null) {
            System.currentTimeMillis(); // TODO remove
        }
        StringBuilder sb = new StringBuilder();

        String cpn = cd.containingPackage().name();
        if (!cpn.isEmpty()) sb.append(cpn.replace('.', '/')).append('/');

        return sb.append(cd.name()).append(".html").toString();
    }

    private static String
    href(FieldDoc fd) {
        ClassDoc   containingClass   = fd.containingClass();
        PackageDoc containingPackage = fd.containingPackage();

        StringBuilder sb = new StringBuilder();

        String cpn = containingPackage.name();
        if (!cpn.isEmpty()) sb.append(cpn.replace('.', '/')).append('/');

        return sb.append(containingClass.name()).append(".html#").append(fd.name()).toString();
    }

    private static String
    href(MethodDoc md) {
        ClassDoc   containingClass   = md.containingClass();
        PackageDoc containingPackage = md.containingPackage();

        StringBuilder sb = new StringBuilder();

        String cpn = containingPackage.name();
        if (!cpn.isEmpty()) sb.append(cpn.replace('.', '/')).append('/');

        sb.append(containingClass.name()).append(".html#");
        sb.append(md.name());
        sb.append('(');
        if (md.parameters().length > 0) {
            Once first = NoTemplate.once();
            for (Parameter p : md.parameters()) {
                if (!first.once()) sb.append(", ");
                sb.append(p.type().qualifiedTypeName());
            }
        }
        sb.append(')');

        return sb.toString();
    }

    private static String
    href(PackageDoc pd) {

        StringBuilder sb = new StringBuilder();

        String packageName = pd.name();
        if (!packageName.isEmpty()) sb.append(packageName.replace('.', '/')).append('/');

        return sb.append("package-summary.html").toString();
    }

    private static String
    toString(Doc doc, Doc ref) {
        if (doc instanceof ClassDoc)   return doc.name();
        if (doc instanceof FieldDoc)   return ClassFrame.toString((FieldDoc) doc, ref);
        if (doc instanceof MethodDoc)  return ClassFrame.toString((MethodDoc) doc, ref);
        if (doc instanceof PackageDoc) return doc.name();
        throw new AssertionError(doc.getClass());
    }

    private static String
    toString(FieldDoc fieldDoc, Doc ref) {

        ClassDoc cc = fieldDoc.containingClass();
        if (
            cc == ref
            || (ref instanceof ProgramElementDoc && ((ProgramElementDoc) ref).containingClass() == cc)
        ) return fieldDoc.name();

        return fieldDoc.containingClass().simpleTypeName() + '.' + fieldDoc.name();
    }

    private static String
    toString(MethodDoc methodDoc, Doc ref) {

        StringBuilder sb = new StringBuilder();

        ClassDoc cc = methodDoc.containingClass();
        if (cc == ref) {
            ;
        } else
        if (ref instanceof ProgramElementDoc && ((ProgramElementDoc) ref).containingClass() == cc) {
            ;
        } else
        {
            sb.append(methodDoc.containingClass().simpleTypeName()).append('.');
        }

        sb.append(methodDoc.name()).append('(');
        for (int i = 0; i < methodDoc.parameters().length; i++) {
            if (i > 0) sb.append(", ");
            Type     pt = methodDoc.parameters()[i].type();
            ClassDoc cd = pt.asClassDoc();
            if (cd == null) {
                sb.append(pt.toString());
            } else
            if ("java.lang".equals(cd.containingPackage().name())) {
                sb.append(cd.name());
            } else
            {
                sb.append(cd.qualifiedName());
            }
        }
        sb.append(')');

        return sb.toString();
    }

    private static String[]
    fragments(MethodDoc methodDoc) {

        // <a name="enableAssertionsFor-java.lang.Class-">
        // but not <a name="enableAssertionsFor-java.lang.Class<?>-">
        //
        // <a name="enableAssertionsForThisClass--">
        //
        // <a name="notNull-java.lang.Object-">
        // also <a name="notNull-T-">
        //
        // <a name="notNull-java.lang.Object-java.lang.String-">
        // <a name="notNull-T-java.lang.String-">
        // but not <a name="notNull-T-String-">
        //
        // <a name="fail--">
        //
        // <a name="fail-java.lang.String-">
        // but not <a name="fail-String-">
        //
        // <a name="fail-java.lang.Throwable-">
        // but not <a name="fail-Throwable-">
        //
        // <a name="fail-java.lang.String-java.lang.Throwable-">
        // but not <a name="fail-String-Throwable-">

        if (methodDoc.parameters().length == 0) {
            return new String[] { methodDoc.name() + "()" };
        }

        StringBuilder sb1 = new StringBuilder(methodDoc.name());
        StringBuilder sb2 = new StringBuilder(methodDoc.name());
        sb1.append('(');
        sb2.append('(');
        Once first = NoTemplate.once();
        for (Parameter p : methodDoc.parameters()) {
            if (!first.once()) {
                sb1.append(", ");
                sb2.append(", ");
            }

            Type pt = p.type();

            if (pt instanceof ParameterizedType) {

                sb1.append(((ParameterizedType) pt).asClassDoc().qualifiedTypeName());
                sb2.append(((ParameterizedType) pt).asClassDoc().qualifiedTypeName());
            } else
            if (pt instanceof WildcardType) {
                Type firstBound = ((WildcardType) pt).extendsBounds()[0];

                sb1.append(firstBound.toString());
                sb2.append(firstBound.toString());
            } else
            if (pt instanceof TypeVariable) {
                Type[] bounds = ((TypeVariable) pt).bounds();
                sb1.append(bounds.length == 0 ? "java.lang.Object" : bounds[0].toString());
                sb2.append(pt.qualifiedTypeName());
            } else
            {
                // "type().qualifiedTypeName()" => "java.lang.Class", "java.lang.String",
                // "java.lang.Throwable"
                sb1.append(pt.qualifiedTypeName());
                sb2.append(pt.qualifiedTypeName());
            }
        }
        String result1 = sb1.append(')').toString();
        String result2 = sb2.append(')').toString();
        return result1.equals(result2) ? new String[] { result1 } : new String[] { result1, result2 };
    }

    @Nullable private String
    returnValueDescription(MethodDoc methodDoc) {
        try {
            String rtd = Tags.optionalTag(methodDoc, "@return", this.rootDoc);
            if (rtd == null) return null;
            return ClassFrame.HTML.fromJavadocText(rtd, methodDoc, this.rootDoc);
        } catch (Longjump l) {
            return "???";
        }
    }
}
